from collections import deque

n, m = map(int, input().split())

graph = []

for i in range(n):
  graph.append(list(map(int, input())))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1] # 상 하 좌 우 결정

def bfs(x, y):
  queue = deque() # queue 구현을 위해 deque 라이브러리 사용
  queue.append((x, y)) # queue에 (x,y) 삽입
  while queue:
    x, y = queue.popleft() # (x,y) 에 대입
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if nx < 0 or ny < 0 or nx > n-1 or ny > m-1:
        continue
      if graph[nx][ny] == 0:
        continue
      if graph[nx][ny] == 1:
        graph[nx][ny] = graph[x][y] + 1 # 칸 개수 계산
        queue.append((nx, ny)) # (nx, ny)를 queue 에 삽입해서 while 문 반복
  return graph[n-1][m-1] # 가장 끝 값 출력

print(bfs(0, 0))
