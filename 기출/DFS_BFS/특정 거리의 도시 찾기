package practice;

import java.util.*;

public class bfxc {
	
	public static ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
	public static boolean[] visited = new boolean[300000];
	public static int[] distance = new int[300000];
	
	public static void bfs(int start) {
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(start);
		visited[start] = true;
		
		while(!queue.isEmpty()) {
			int x = queue.poll();
			//System.out.print(x + " ");
			
			for(int i = 0; i < graph.get(x).size(); i++) {
				int y = graph.get(x).get(i);
				if(!visited[y]) {
					distance[y] = distance[x] + 1;
					queue.offer(y);
					visited[y] = true;
				}
			}	
		}
	}
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		int n = in.nextInt();
		int m = in.nextInt();
		int target = in.nextInt();
		int start = in.nextInt();
		
		for(int i = 0; i < n+1; i++)
			graph.add(new ArrayList<Integer>());
		
		for(int i = 0; i < m; i++) {
			int a = in.nextInt();
			int b = in.nextInt();
			graph.get(a).add(b);
		}
		
		bfs(start);
		boolean flag = true;
		for(int i = 1; i < n+1; i++)
			if(distance[i] == target) {
				System.out.println(i);
				flag = false;
			}
		if(flag)
			System.out.println(-1);
	}	
}
